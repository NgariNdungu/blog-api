openapi: "3.0.0"

info:
  title: Blog API
  version: "1.0.0"
  
paths:
  /users:
    post:
      summary: Creates a user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              username: user01
              password: superstrongpassword
              full_name: "super long name"
                  
      responses:
        '201':
          description: Created
        '400':
          description: Invalid registration credentials
          
  /blogs:
    get:
      summary: Gets a list of all blogs
      responses:
        '200':
          description: A list of hashes containing the blog id as the key and the title as the value
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    title:
                      type: string
                    body:
                      type: string
              example:
                - id: 1
                  title: first_blog
                - id: 2
                  title: second_blog
    post:
      summary: Creates a new blog post
      security:
        - BasicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Blog'
            example:
              title: "quite the title"
              text: "and some text"
      responses:
        '201':
          description: Created
        '401':
          description: Unauthorized
      
  /blogs/{blogId}:
    get:
      summary: Returns a single blog by ID
      parameters:
        - $ref: '#/components/parameters/BlogId'
      responses:
        '200':
          description: Blog object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
        '404':
          description: Not found
          
    patch:
      summary: Updates an existing post
      security:
        - BasicAuth: []
      parameters:
        - $ref: '#/components/parameters/BlogId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                text:
                  type: string
      responses:
        '200':
          description: Updated
        '404':
          description: Not found
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
          
    delete:
      summary: Deletes an existing post
      security:
        - BasicAuth: []
      parameters:
        - $ref: '#/components/parameters/BlogId'
      responses:
        '200':
          description: Deleted
        '404':
          description: Not found
        '401':
          description: Unauthorized
          
  /blogs/{blogId}/comments:
    get:
      summary: Get a list of comments associated with a single post
      parameters:
        - $ref: '#/components/parameters/BlogId'
      responses:
        '200':
          description: Returns an array of comments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
              example: 
                - commenter: first_commenter
                  body: comment_body
                  id: 1
                - commenter: commenter2
                  body: comment_body
                  id: 2
        '404':
          description: No comments for that blog
    post:
      summary: Post a comment to a blog
      security:
        - BasicAuth: []
      parameters:
        - $ref: '#/components/parameters/BlogId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
      responses:
        '201':
          description: Comment added
        '401':
          description: Unauthorized
          
  /blogs/{blogId}/comments/{commentId}:
    get:
      summary: Get a comment by ID
      parameters:
        - $ref: '#/components/parameters/BlogId'
        - $ref: '#/components/parameters/CommentId'
      responses:
        '200':
          description: Returns a comment object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
              example: {
                "id": 1,
                "commenter": "pooh",
                "body":"Great post"
              }
        '404':
          description: Not found
    delete:
      summary: Delete comment by ID
      security:
        - BasicAuth: []
      parameters:
        - $ref: '#/components/parameters/BlogId'
        - $ref: '#/components/parameters/CommentId'
      responses:
        '200':
          description: Deleted
        '404':
          description: Not found
        '401':
          description: Unauthorized
          
components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
      
  schemas:
    Blog:
      type: object
      properties:
        title:
          type: string
        text:
          type: string
        id:
          type: integer
        author_id:
          type: integer
      required:
        - title
        - text
          
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        password:
          type: string
          format: password
        full_name:
          type: string
      required:
        - username
        - password
        - full_name
          
    Comment:
      type: object
      properties:
        id:
          type: integer
        commenter:
          type: string
        body:
          type: string
        blog_id:
          type: integer
    
  parameters:
    BlogId:
      name: blogId
      in: path
      required: true
      schema:
        type: integer
        format: int64
        minimum: 1
    
    CommentId:
      name: commentId
      in: path
      required: true
      schema:
        type: integer
        format: int64
        minimum: 1